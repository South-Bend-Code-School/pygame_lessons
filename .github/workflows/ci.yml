name: ci 
on:
  push:
    branches:
      - master 
      - main
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache 
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material 
      - run: mkdocs gh-deploy --force

        # Create ZIP files for each game/example
      - name: Create ZIP files
        run: |
          mkdir -p dist
          for folder in docs/full-game-examples/* docs/pygame/*; do
            if [ -d "$folder" ]; then
              zip -r "dist/$(basename "$folder").zip" "$folder"
            fi
          done

      # Automatically create releases if they don't exist
      - name: Ensure Releases Exist
        run: |
          for file in dist/*.zip; do
            game_name=$(basename "$file" .zip)
            release_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/$game_name"
            response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_url")

            if [ "$response" -eq 404 ]; then
              echo "Creating new release for $game_name"
              curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   -H "Content-Type: application/json" \
                   -d "{\"tag_name\":\"$game_name\",\"name\":\"Latest $game_name Release\",\"draft\":false,\"prerelease\":false}" \
                   "https://api.github.com/repos/${{ github.repository }}/releases"
            else
              echo "Release for $game_name already exists."
            fi
          done

      # Upload ZIP files to the correct releases
      - name: Upload ZIPs to Releases
        run: |
          for file in dist/*.zip; do
            game_name=$(basename "$file" .zip)
            upload_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$game_name" | \
                          jq -r '.upload_url' | sed 's/{?name,label}//')

            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Content-Type: application/zip" \
                 --data-binary @"$file" \
                 "$upload_url?name=$(basename "$file")"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}