{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to Pygame Mini Lessons, where you can learn about key game development skills by running simple pygame examples.</p>"},{"location":"#mini-lessons","title":"Mini Lessons","text":"<p>These examples will help you: \u2705 Draw shapes and handle colors \u2705 Capture keyboard &amp; mouse input \u2705 Work with sprites and animations \u2705 Detect collisions and add player interactions \u2705 Implement sound, music, and scrolling backgrounds \u2705 Build complete games like Pong, Snake, and Breakout  </p>"},{"location":"#lesson-structure","title":"Lesson Structure","text":"<p>Lessons are organized to progressively introduce new concepts: - Basics: Drawing, input handling, colors, and sound - Game Mechanics: Images, animation, collisions, and classes - Full Game Examples: Pong, Snake, Breakout, and Flappy Bird  </p> <p>Explore the lessons, download and run the code, modify the code, and take the best parts to start building your own games. </p> <p>Happy coding! \ud83c\udfae  </p>"},{"location":"challeges/one-button-game/one_button/","title":"\ud83c\udfae One-Button Game Challenge","text":"<p>Objective:  Brainstorming, scoping, and plan a simple one-button 2D game you can build in Pygame.  </p> <p>This constraint-based challenge encourages creativity while keeping the scope manageable.  </p>"},{"location":"challeges/one-button-game/one_button/#rules","title":"Rules","text":"<p>The rule is simple.  Design a 2D game that you can play with only one button!</p>"},{"location":"challeges/one-button-game/one_button/#great-games-dont-need-complex-controls","title":"Great games don\u2019t need complex controls.","text":"<p>Here are a few example games that work with only one button!   - Flappy Bird \u2013 Tap to flap.   - Canabalt \u2013 Tap to jump in an endless runner.   - Jetpack Joyride \u2013 Hold to go up, release to go down.   - Alto\u2019s Adventure \u2013 Tap to jump and perform tricks.</p> <ul> <li>Constraint: Students must design a game that only uses ONE BUTTON for input.</li> <li>No movement keys.</li> <li>No mouse aiming.</li> <li> <p>No multiple actions\u2014just tap, hold, or release.</p> </li> <li> <p>What\u2019s possible with one button?</p> </li> <li>Jumping (timing-based platformers).</li> <li>Flapping or floating (like Flappy Bird).</li> <li>Switching gravity (like VVVVVV).</li> <li>Charging an action (like a golf shot).</li> <li>Rhythm-based actions (like Geometry Dash).</li> </ul>"},{"location":"challeges/one-button-game/one_button/#2-brainstorming-game-ideas-20-min","title":"2. Brainstorming Game Ideas (20 min)","text":"<p>(Students work in groups of 3-4 to brainstorm within the one-button constraint.) - Prompt: \"You only have one button\u2014what can your player do?\" - Game Types (Choose One)   - Jump Timing: Press to jump gaps (Flappy Bird style).   - Hold &amp; Release: Charge and release a power meter (golf or bow &amp; arrow).   - Auto-Run Platformer: Player runs automatically, press to jump (Canabalt).   - Switching Mechanic: Flip gravity, swap between lanes, or teleport.   - Endless Climber: Player slowly falls unless button is held (Doodle Jump variation).</p> <ul> <li>Deliverable: Each group writes down their game idea in one sentence.</li> <li>Example: \"A ninja automatically runs forward, and pressing the button makes them jump over obstacles.\"</li> </ul>"},{"location":"challeges/one-button-game/one_button/#3-defining-game-requirements-20-min","title":"3. Defining Game Requirements (20 min)","text":"<p>(Groups create a basic game blueprint.) - Fill out a game planning sheet:   - Game Name   - Objective (How do you win?)   - What does the button do? (Tap? Hold? Release?)   - Main Character   - Enemy/Obstacle   - Assets Needed (Sprites, Background, Sounds)</p> <ul> <li>Example Blueprint:</li> </ul>"},{"location":"full-game-examples/breakout-game/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"full-game-examples/curse-of-barnacle-briggs/barnacle-briggs/","title":"The Curse of Barnacle Briggs","text":"\u2b07 Download Game Source Code      <p>Ahoy, mate! I be Captain Barnacle Briggs, the only poor soul left from the crew of the Black Squall, and I\u2019ve come to beg fer yer forgiveness\u2014and yer help. We were a wicked lot, pillagin\u2019 treasures that weren\u2019t ours, and our greed sealed our doom. </p> <p>Among the gold and gems we plundered was the Emerald Heart, a jewel green as the sea and large as a boulder. What we didn\u2019t know was that the heart wasn\u2019t just treasure\u2014it was the very soul of yer island. The storm that tore our ship apart was no natural gale but the wrath o\u2019 the cursed heart itself, draggin\u2019 us to the bottom of the sea. The rest o\u2019 me crew lies as bones scattered on the ocean floor, and me? I\u2019m doomed to haunt these shores till the curse is lifted.</p> <p>This curse be no longer just my burden\u2014it\u2019s brought ruin to yer village as well. The seas rage, crops wither, and shadows grow darker with each passing day. </p> <p>The Emerald must be returned to its rightful place, at the heart of your land, or the island will never know peace again. </p> <p>I can\u2019t do it alone, mate. I need someone with courage enough to face the perils of the deep, to brave the monsters and the unknown, and help me right this terrible wrong. </p> <p>What say ye, friend? Will ye help a cursed old sea dog atone for his sins and save yer island?</p>"},{"location":"full-game-examples/curse-of-barnacle-briggs/barnacle-briggs/#what-youll-learn","title":"What You\u2019ll Learn","text":"<p>While building this game you\u2019ll learn key programming and game development skills, including:</p> <ol> <li>Python: variables, classes, functions, loops, and conditionals.</li> <li>Game Loop: Player dodges enemies while collecting coins and seeking the emerald.</li> <li>Sprites and Animations: Using sprite sheets to create animations.</li> <li>Keyboard Input: Moving the player character with keyboard controls.</li> <li>Collision Detection: Checking when the player interacts with objects.</li> <li>Parallax Scrolling: Creating the illusion of depth with moving backgrounds.</li> <li>Sound Effects and Music: Adding audio to make the game more immersive.</li> <li>Game Polish: Refining the game with a scoring system, win/loss conditions, and smooth animations.</li> </ol>"},{"location":"full-game-examples/flappy-bird-game/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"full-game-examples/pong-game/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"full-game-examples/snake-game/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"game-design/coming_soon/","title":"Game Design Mini Lessons Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"getting-started/00-Installation/Installation/","title":"Installation","text":"<p>If you want to work on your game projects at home, follow this guide to ensure your computer is setup with the necessary software.</p> <p>This tutorial will walk you through installing:</p> <ul> <li>Python</li> <li>Visual Studio Code</li> <li>and pygame</li> </ul>"},{"location":"getting-started/00-Installation/Installation/#step-1-install-python","title":"Step 1: Install Python","text":"<p>Python is the most popular programming language and was designed to be easy to use and learn. It is used in every industry, including game development.</p>"},{"location":"getting-started/00-Installation/Installation/#download-and-install-python","title":"Download and Install Python","text":"<ol> <li>Go to the official Python website: https://www.python.org/downloads/</li> <li>Download the latest version for your operating system (Windows/Mac/Linux).</li> <li>Open the installer and check the box that says \"Add Python to PATH\" before clicking Install Now.</li> </ol> <p> Alt text: Screenshot of the Python installer with the \"Add Python to PATH\" option checked.</p> <p>:::info If you forget to check \"Add Python to PATH,\" you may have trouble running Python from the command line. The easiest fix is to reinstall Python and check the box that adds Python to the PATH. :::</p>"},{"location":"getting-started/00-Installation/Installation/#step-2-install-visual-studio-code","title":"Step 2: Install Visual Studio Code","text":"<p>Visual Studio Code is the most popular text editor for software and game developers.</p>"},{"location":"getting-started/00-Installation/Installation/#download-and-install-vs-code","title":"Download and Install VS Code","text":"<ol> <li>Go to the official VS Code website: https://code.visualstudio.com/</li> <li>Download the installer for your operating system.</li> <li>Run the installer and follow the setup instructions.</li> </ol> <p> Alt text: Screenshot of the VS Code download page with options for different operating systems.</p>"},{"location":"getting-started/00-Installation/Installation/#enable-python-extension-in-vs-code","title":"Enable Python Extension in VS Code","text":"<p>Once VS Code is installed: 1. Open VS Code. 2. Go to the Extensions Marketplace (Ctrl+Shift+X or Cmd+Shift+X on Mac). 3. Search for Python and install the Python extension by Microsoft.</p> <p> Alt text: Screenshot of the VS Code Extensions Marketplace with the Python extension selected.</p> <p>:::tip The Python extension provides syntax highlighting and type-ahead suggestions, making it easier to write and debug Python code inside Visual Studio Code. :::</p>"},{"location":"getting-started/00-Installation/Installation/#step-3-using-the-terminal-in-visual-studio-code","title":"Step 3: Using the Terminal in Visual Studio Code","text":"<p>A \"terminal\" is just a place where you can type commands for your computer to run. It may look a little scary at first, but don't worry\u2014it\u2019s just like giving your computer instructions!</p>"},{"location":"getting-started/00-Installation/Installation/#opening-the-terminal","title":"Opening the Terminal","text":"<p>Instead of using a separate terminal window, always use the terminal inside Visual Studio Code: 1. Open VS Code. 2. Click on Terminal in the top menu. 3. Select New Terminal. 4. A panel will open at the bottom where you can type commands.</p> <p> Alt text: Screenshot of Visual Studio Code with the terminal panel open.</p> <p>This is where you will type commands to install Pygame and run your code!</p>"},{"location":"getting-started/00-Installation/Installation/#step-4-validate-your-python-installation","title":"Step 4: Validate Your Python Installation","text":"<p>In the VS Code Terminal, type:</p>"},{"location":"getting-started/00-Installation/Installation/#windows","title":"Windows","text":"<pre><code>py --version\n</code></pre>"},{"location":"getting-started/00-Installation/Installation/#maclinux","title":"Mac/Linux","text":"<pre><code>python --version\n</code></pre> <p>:::tip On some Macs, your Python command might be <code>python3</code>. If you are having trouble, try <code>python3 --version</code>. :::</p> <p>If Python is installed correctly, you should see the version number displayed.</p>"},{"location":"getting-started/00-Installation/Installation/#step-5-install-pygame","title":"Step 5: Install Pygame","text":"<p>Python is a general-purpose programming language. To create games, we need to install a module called <code>pygame</code>. This module makes it easy to write games using Python!</p>"},{"location":"getting-started/00-Installation/Installation/#installing-pygame","title":"Installing Pygame","text":"<p>In the VS Code Terminal, type:</p>"},{"location":"getting-started/00-Installation/Installation/#windows-using-py","title":"Windows (using <code>py</code>)","text":"<pre><code>py -m pip install pygame\n</code></pre>"},{"location":"getting-started/00-Installation/Installation/#maclinux_1","title":"Mac/Linux","text":"<pre><code>pip install pygame\n</code></pre> <p>:::tip On some Macs, your <code>pip</code> command might be <code>pip3</code>. If you are having trouble, try <code>pip3 install pygame</code>. :::</p>"},{"location":"getting-started/00-Installation/Installation/#verify-installation","title":"Verify Installation","text":"<p>To check if Pygame is installed correctly, type this command in the VS Code Terminal:</p>"},{"location":"getting-started/00-Installation/Installation/#windows_1","title":"Windows","text":"<pre><code>py -m pygame.examples.aliens\n</code></pre>"},{"location":"getting-started/00-Installation/Installation/#maclinux_2","title":"Mac/Linux","text":"<pre><code>python -m pygame.examples.aliens\n</code></pre> <p>If Pygame is installed correctly, a game window should appear.</p> <p>:::tip If you encounter errors, try these troubleshooting steps: - Check Pygame installation: Run <code>py -m pip show pygame</code> or <code>pip show pygame</code>. - Reinstall Pygame: Run <code>py -m pip install --upgrade pygame</code> or <code>pip install --upgrade pygame</code>. :::</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/","title":"Starter Game Template","text":"<p>This guide will help you set up your first game using Pygame! Following these steps, you can run your game and modify it to create something unique.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#download-the-game-starter-code","title":"Download the Game Starter Code","text":"<p>Download the file <code>game.py</code> and save it to your computer. This file contains the basic game loop and player movement to get you started.</p>          \u2b07 Download game.py"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#create-a-new-project-folder","title":"Create a New Project Folder","text":"<ul> <li>Choose an appropriate name for your game, such as <code>MyAwesomeGame</code>, <code>Asteroids</code>, or <code>SpaceRunner</code>. <ul> <li>Your project's folder name should not contain spaces or special characters. </li> <li>Use capital letters to separate words.</li> </ul> </li> <li>On your computer, create a new folder with your game's name. <ul> <li>This will be your project folder where all your game files and assets will be stored.</li> </ul> </li> </ul> <p>What are Project Folders?</p> <p>A project folder helps you keep all your game files organized in one place. As your game grows, you\u2019ll need more than just the <code>game.py</code> file. Your project folder will store:</p> <ul> <li>Game Code: The Python files that run your game.</li> <li>Images: Graphics like backgrounds, characters, and objects.</li> <li>Sounds: Background music and sound effects.</li> <li>Instructions/README: A file explaining how to play the game.</li> </ul> <p>Keeping everything in one folder makes finding and managing your game assets easier.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#move-the-game-file","title":"Move the Game File","text":"<ul> <li>Move <code>game.py</code> into your newly created project folder.</li> </ul> <p>As you start adding images and sounds, your project folder should evolve to look like this:</p> <pre><code>MyAwesomeGame/\n\u251c\u2500\u2500 game.py           # Main game file\n\u251c\u2500\u2500 assets/           # Folder for images and sounds\n\u2502   \u251c\u2500\u2500 player.png    # Example player image\n\u2502   \u251c\u2500\u2500 background.png # Example background\n\u2502   \u251c\u2500\u2500 jump.wav      # Example sound effect\n</code></pre> <p>This structure keeps your project organized, making you less likely to encounter errors when referencing files.</p> <p>File Naming Best Practices</p> <p>When naming files in your project, always use lowercase letters (<code>a-z</code>) with underscores (<code>_</code>) between words. Filenames are case-sensitive, so be consistent!</p> \u2705 Good File Name \u274c Bad File Name <code>player_ship.png</code> <code>Player Ship.png</code> (spaces &amp; uppercase) <code>laser_blast.wav</code> <code>Laser_blast.PNG</code> (inconsistent case) <p>Keeping filenames lowercase and using underscores prevents errors in your code.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#open-your-project-in-visual-studio-code","title":"Open Your Project in Visual Studio Code","text":"<ul> <li>Open Visual Studio Code (VS Code).</li> <li>Click on File &gt; Open Folder... and select your game project folder.</li> </ul> <p>Alt text: Screenshot of Visual Studio Code with the \"Open Folder\" option highlighted.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#open-the-game-file","title":"Open the Game File","text":"<ul> <li>In the Explorer panel on the left, find and click on <code>game.py</code> to open it.</li> </ul> <p>Alt text: Screenshot of Visual Studio Code showing <code>game.py</code> selected in the Explorer panel.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#run-the-game","title":"Run the Game","text":"<ul> <li>Click the Run button at the top right.</li> <li>Or, use the keyboard shortcut:</li> <li>Windows/Linux: <code>Ctrl+Shift+B</code></li> <li>Mac: <code>Cmd+Shift+B</code></li> </ul> <p>Alt text: Screenshot of Visual Studio Code with the \"Run\" button highlighted.</p>"},{"location":"getting-started/01-Starter-Game-Template/starter_game_template/#modify-your-game","title":"Modify Your Game!","text":"<p>Now that you have everything set up, you can start modifying <code>game.py</code> to create your own unique game! </p> <p>Use the <code>Mini Lessons</code> to learn cool new tricks!</p>"},{"location":"pygame/animated-sprites/animated_sprites/","title":"Creating an Animated Sprites","text":"<p>     \u2b07 Download animated_sprites.py </p> <p>     \u2b07 Download Gold Coin Spritesheet </p> <p>     \u2b07 Download Ruby Coin Spritesheet </p>"},{"location":"pygame/animated-sprites/animated_sprites/#lesson-objective","title":"Lesson Objective","text":"<p>Create an <code>AnimatedSprite</code> class that:</p> <ul> <li>Loads a sprite sheet where frames are laid out horizontally.</li> <li>Loops through the animation frames at a controlled speed.</li> <li>Returns the current frame for rendering.</li> </ul>"},{"location":"pygame/animated-sprites/animated_sprites/#concepts-covered","title":"Concepts Covered","text":"<ol> <li>Sprite Sheets \u2013 Understanding how images with multiple animation frames are organized.</li> <li>Subsurface Extraction \u2013 Extracting individual frames from a sprite sheet.</li> <li>Frame Timing &amp; Animation \u2013 Cycling through frames based on elapsed time.</li> <li>Object-Oriented Programming \u2013 Encapsulating animation logic in a class.</li> </ol>"},{"location":"pygame/animated-sprites/animated_sprites/#understanding-sprite-sheets","title":"Understanding Sprite Sheets","text":"<p>A sprite sheet is a single image containing multiple animation frames. Instead of loading multiple images, we extract sections of this sheet to create an animation.</p> <p>For this lesson, we assume all frames are laid out horizontally in a single row.</p> <p>Example: <code>coin-gold.png</code></p> <p></p> <p>This sprite has 5 frames.</p> <pre><code>-------------------------------------------------\n| Frame 1 | Frame 2 | Frame 3 | Frame 4 | Frame 5 |\n-------------------------------------------------\n</code></pre> <p>Each frame has the same width and height.  </p> <ul> <li>Width: 16 pixels</li> <li>Heigh  16 pixels</li> </ul> <p>By drawing 1 frame at a time, an incrementing one frame every few milliseconds the sprite animates!</p>"},{"location":"pygame/animated-sprites/animated_sprites/#_1","title":"Animating Sprites","text":""},{"location":"pygame/animated-sprites/animated_sprites/#understanding-the-animatedsprite-class","title":"Understanding the <code>AnimatedSprite</code> Class","text":"<p>In Python, a class is like a blueprint\u2014it defines how an object should behave, just like a cookie cutter defines the shape of a cookie. But a class itself is not an object; it just tells Python how to create one. When we create an instance of a class, we are making an actual object (like baking a cookie from the cutter).</p> <p>The <code>AnimatedSprite</code> class is a blueprint for animated sprites. It keeps track of:</p> <ul> <li>The current frame being displayed.</li> <li>How long each frame should be visible before moving to the next one.</li> <li>How to extract a frame from a sprite sheet.</li> </ul>"},{"location":"pygame/animated-sprites/animated_sprites/#a-simple-animatedsprite-class-example","title":"A simple <code>AnimatedSprite</code> Class example","text":"<pre><code>class AnimatedSprite:\n    def __init__(self, image, frame_width, animation_speed_ms=150):\n        \"\"\"\n        Initialize the animated spritesheet.\n\n        Parameters:\n        - image: A pygame image object.\n        - frame_width: Width of each frame in pixels.\n        - animation_speed_ms: The animation speed in milliseconds (1000 ms = 1 second).\n        \"\"\"\n        # Load the sprite sheet.\n        self.sprite_sheet = image\n        self.frame_width = frame_width\n        self.animation_speed_ms = animation_speed_ms\n\n        # Calculate dimensions and frames.\n        self.frame_height = self.sprite_sheet.get_height()  # Assumes sprite sheets are organized horizontally.\n        self.frame_count = self.sprite_sheet.get_width() // frame_width  # Integer division\n        self.current_frame = 0  # Start at the first frame of the animation.\n\n        # Time tracking.\n        self.time_since_last_frame = 0  # Start with 0 elapsed time.\n\n    def get_frame(self, dt):\n        \"\"\"\n        Get the current frame as a surface and update the animation frame if enough time has passed.\n\n        Parameters:\n        - dt: The time elapsed (in seconds) since the last update.\n        \"\"\"\n        self.time_since_last_frame += dt * 1000  # Convert seconds to milliseconds.\n\n        if self.time_since_last_frame &gt;= self.animation_speed_ms:\n            # Advance to the next frame.\n            self.current_frame = (self.current_frame + 1) % self.frame_count\n            self.time_since_last_frame = 0  # Reset elapsed time.\n\n        x = self.current_frame * self.frame_width\n        frame = self.sprite_sheet.subsurface((x, 0, self.frame_width, self.frame_height))\n        return frame\n</code></pre>"},{"location":"pygame/animated-sprites/animated_sprites/#how-to-use-the-animatedsprite-class-making-a-cookie","title":"How to Use the AnimatedSprite Class (Making a Cookie)","text":"<p>To use the <code>AnimatedSprite</code> class, we need to create an instance of it. This is like using the cookie cutter to actually make a cookie.  </p> <p>In our class definition, creating an instance is handled by the init() function. This special function, known as the initializer, runs automatically whenever a new instance of the class is created.</p> <p>The init function:</p> <ul> <li>Defines what data is required to create a new instance.</li> <li>Sets up the attributes for this specific instance.</li> <li>Allows multiple objects to be created independently from the same class definition.</li> </ul> <p>Think of a class as a cookie cutter and an instance as an individual cookie made from it.</p>"},{"location":"pygame/animated-sprites/animated_sprites/#creating-an-instance","title":"Creating an Instance","text":"<p>The following code creates a new instance of our AnimatedSprite.</p> <pre><code># Load our sprite sheet as an image\ncoin_img = pygame.image.load(\"coin-gold.png\")\n\n# Create an animated sprite using our class blueprint\nanimated_coin = AnimatedSprite(image=coin_img, frame_width=16, animation_speed_ms=100)\n</code></pre> <ul> <li><code>pygame.image.load(\"coin-gold.png\")</code> loads a sprite sheet containing multiple frames.</li> <li><code>AnimatedSprite(image=coin_img, frame_width=16, animation_speed_ms=100)</code> creates an instance (a new object) of our AnimatedSprite class.</li> </ul> <p>The instance animated_coin now holds:</p> <ul> <li>The loaded sprite sheet.</li> <li>The width of a single animation frame (16 pixels).</li> <li>The speed at which the animation should update (every 100 milliseconds).</li> </ul> <p>Since we might want multiple animated sprites in a game, we can create additional instances as needed:</p> <p>Here is a ruby coin sprite sheet!</p> <p></p> <pre><code># Load another sprite sheet for a different animation\nruby_coin_img = pygame.image.load(\"coin-ruby.png\")\n\n# Create another animated sprite\nruby_coin_animated = AnimatedSprite(image=ruby_coin_img, frame_width=16, animation_speed_ms=80)\n</code></pre> <p>This allows us to animate multiple instances independently in our game!  Each object instance tracks it's own state and animation speed.</p>"},{"location":"pygame/animated-sprites/animated_sprites/#using-get_frame-in-the-game-loop","title":"Using <code>get_frame()</code> in the Game Loop","text":"<p>The <code>get_frame(dt)</code> function must be called inside the game loop, where we pass in the time that has elapsed since the last frame update. This ensures the animation progresses correctly over time.</p> <p>Example usage inside a game loop:</p> <pre><code>running = True\nclock = pygame.time.Clock()\nwhile running:\n    dt = clock.tick(60) / 1000.0  # Get the time passed since last frame in seconds\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Get the updated frame with delta time\n    coin_frame = animated_coin.get_frame(dt)\n\n    # Draw the updated frame\n    SCREEN.fill((0, 0, 0))\n    SCREEN.blit(coin_frame, (100, 100))\n    pygame.display.flip()\n\npygame.quit()\n</code></pre>"},{"location":"pygame/animated-sprites/animated_sprites/#how-it-works","title":"How It Works","text":"<ul> <li>The <code>animated_coin</code> object now keeps track of the current animation frame.</li> <li>Every time we call <code>get_frame(dt)</code>, we pass in the time that has elapsed since the last update.</li> <li>The method checks if enough time has passed to switch to the next frame before returning it.</li> <li>The animation automatically updates within <code>get_frame()</code>.</li> </ul>"},{"location":"pygame/animated-sprites/animated_sprites/#summary","title":"Summary","text":"<p>This class is useful because we can create many different animated sprites using the same blueprint!</p>"},{"location":"pygame/background-music/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/collision-detection/coming_soon/","title":"Collision Detection Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/colors/colors/","title":"Understanding RGB Colors","text":"<p>     \u2b07 Download color_mixer.py </p> <p>Download and Run the <code>color_mixer.py</code> to learn how colors are represented in python.</p> <ol> <li>The game displays three circles representing red, green, and blue.</li> <li>A final color circle represents their combined value.</li> <li>You can adjust each color component using the R, G, and B keys, with Shift to increase and lowercase to decrease.</li> <li>The numbers inside the circles show the current intensity of each color.</li> </ol> <p>By adjusting these values, you can see how RGB color mixing works in real-time!</p>"},{"location":"pygame/colors/colors/#what-is-rgb","title":"What is RGB?","text":"<p>RGB stands for Red, Green, and Blue. It is an additive color model used to represent colors on digital screens. Each color on a screen is created by combining different intensities of red, green, and blue light. The combination of these three primary colors can produce millions of different colors.</p> <p>RGB is an additive system, meaning that the more light you add, the brighter the color becomes.  </p> <p></p> <p>Above: Red, Green, and Blue lights mix to create new colors.</p> <p>RGB colors are often represented as tuples in Python, such as: <pre><code>(255, 0, 0)  # Red\n(0, 255, 0)  # Green\n(0, 0, 255)  # Blue\n(255, 255, 0)  # Yellow\n(0, 255, 255) # Pink\n(255, 255, 255)  # Solid White\n(0, 0, 0)  # Solid Black\n</code></pre></p> <p>By adjusting the values of red, green, and blue, we can create any color that our eyes can perceive. </p> <p>Each color channel can range from 0 (no intensity) to 255 (full intensity), meaning there are 16,777,216 possible colors (256 \u00d7 256 \u00d7 256).</p> <p>Tuples in Python</p> <p>A tuple is an ordered collection of values that cannot be changed after creation. </p> <p>Think of it like (x, y) coordinates on a graph or (R, G, B) values in a color system.</p> <p>For example, an RGB color is represented as a tuple:</p> <ul> <li>First value \u2192 Red intensity (0 to 255)  </li> <li>Second value \u2192 Green intensity (0 to 255)  </li> <li>Third value \u2192 Blue intensity (0 to 255)  </li> </ul> <pre><code>color = (255, 0, 0)  # Red color\n</code></pre> <p>Since tuples are immutable, their values cannot be changed after they are assigned.</p>"},{"location":"pygame/colors/colors/#challenge","title":"Challenge","text":"<p>Try changing the values and see how different colors form. What happens when:</p> <ul> <li>All values are the same?</li> <li>One value is at max while the others are at zero?</li> <li>You mix two primary colors?</li> </ul>"},{"location":"pygame/drawing-shapes/draw_shapes/","title":"Drawing Shapes in Pygame","text":"<p>     \u2b07 Download draw_shapes.py </p>"},{"location":"pygame/drawing-shapes/draw_shapes/#the-pygame-coordinate-system","title":"The Pygame Coordinate System","text":"<p>A coordinate system is used to place objects on the screen.  It's important to know how pygame's coordinate systems works.</p> <ul> <li>(0,0) is in the top-left corner of the screen.</li> <li>As x increases, the position moves to the right.</li> <li>As y increases, the position moves downward.</li> </ul> <p>To help visualize this, this example draws a grid in 50-pixel increments, with labels marking x and y positions.</p> <p></p>"},{"location":"pygame/drawing-shapes/draw_shapes/#drawing-shapes-in-pygame_1","title":"Drawing Shapes in Pygame","text":"<p>Pygame provides built-in functions to draw various shapes and every shape is placed using coordinates. A coordinate is a pair of numbers (x, y) that tells us where something is on the screen.</p> <ul> <li>The x-value represents the horizontal position (left to right).</li> <li>The y-value represents the vertical position (top to bottom).</li> <li>Coordinates are always written as (x, y) in parentheses.</li> </ul>"},{"location":"pygame/drawing-shapes/draw_shapes/#available-shapes","title":"Available Shapes:","text":""},{"location":"pygame/drawing-shapes/draw_shapes/#rectangle-pygamedrawrect","title":"Rectangle (<code>pygame.draw.rect</code>)","text":"<p><pre><code>pygame.draw.rect(SCREEN, ORANGE, (50, 50, 200, 100))\n</code></pre> </p> <ul> <li>Draws a rectangle at coordinate (50,50)</li> <li>with a Width = 200, and a Height = 100</li> </ul>"},{"location":"pygame/drawing-shapes/draw_shapes/#circle-pygamedrawcircle","title":"Circle (<code>pygame.draw.circle</code>)","text":"<p><pre><code>pygame.draw.circle(SCREEN, PURPLE, (400, 300), 50)\n</code></pre> </p> <ul> <li>Draws a circle with a center at coordinate = (400,300)</li> <li>with a Radius = 50</li> </ul>"},{"location":"pygame/drawing-shapes/draw_shapes/#line-pygamedrawline","title":"Line (<code>pygame.draw.line</code>)","text":"<p><pre><code>pygame.draw.line(SCREEN, GREEN, (100, 500), (700, 500), 5)\n</code></pre>    - Starts at (100,500), ends at (700,500)    - Line thickness = 5 pixels</p>"},{"location":"pygame/drawing-shapes/draw_shapes/#polygon-pygamedrawpolygon","title":"Polygon (<code>pygame.draw.polygon</code>)","text":"<p><pre><code>pygame.draw.polygon(SCREEN, PURPLE, [(600, 100), (650, 200), (550, 200)])\n</code></pre>    - Connects points (600,100), (650,200), and (550,200) to form a triangle.</p>"},{"location":"pygame/drawing-shapes/draw_shapes/#ellipse-pygamedrawellipse","title":"Ellipse (<code>pygame.draw.ellipse</code>)","text":"<p><pre><code>pygame.draw.ellipse(SCREEN, ORANGE, (300, 400, 150, 80))\n</code></pre>    - Fits inside a bounding box at (300,400)    - Width = 150, Height = 80</p>"},{"location":"pygame/drawing-shapes/draw_shapes/#challenges","title":"Challenges","text":"<p>Try modifying the code to place the shapes in different locations:</p> <ol> <li>Move the rectangle to (100,100) and double its size.</li> <li>Change the circle\u2019s position so it appears in the bottom-right corner.</li> <li>Make the line diagonal, starting from (0,0) to (800,600).</li> <li>Adjust the triangle to form a different shape by modifying the points.</li> </ol>"},{"location":"pygame/framerate-independence/framerate_independence/","title":"Understanding Frame Rate Independence in Game Development","text":"\u2b07 Download framerate_independence.py          \u2705 Frame Rate Independent (Delta Time) - GOOD Rotates at 160 degrees per second, maintaining consistent motion across all frame rates. <pre>delta_time = clock.get_time() / 1000.0angle += 160 * delta_time</pre> 9 FPS (160 degrees per second) 60 FPS (160 degrees per second) \u274c Frame Rate Dependent - BAD Rotates 160 degrees per frame, causing inconsistency in motion across different frame rates. <pre>angle += 160</pre> 9 FPS (160 degrees per frame) 60 FPS (160 degrees per frame)"},{"location":"pygame/framerate-independence/framerate_independence/#why-should-you-care-about-frame-rate-independence","title":"Why Should You Care About Frame Rate Independence?","text":"<p>Imagine you are playing a game where a character moves at a fixed speed of 5 pixels per frame. Now, imagine the game runs at 60 frames per second (FPS). That means the character moves 5 \u00d7 60 = 300 pixels per second. But what if your computer slows down and runs at 30 FPS? Suddenly, the character moves 5 \u00d7 30 = 150 pixels per second, making the game feel sluggish and unfair.</p> <p>This is why we use frame rate-independent movement! Instead of moving by a fixed amount per frame, we adjust movement based on the time that has passed, ensuring the game plays consistently regardless of FPS.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#how-the-code-works","title":"How the Code Works","text":"<p>In our game, we have a spinning square, and we make sure it rotates at a constant speed, no matter what the FPS is.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#key-concepts","title":"Key Concepts","text":""},{"location":"pygame/framerate-independence/framerate_independence/#milliseconds-and-delta_time","title":"Milliseconds and <code>delta_time</code>","text":"<p>Computers run really fast, so instead of measuring time in seconds, we use milliseconds (1 second = 1000 milliseconds). </p> <p>We calculate the time since the last frame using: <pre><code>    delta_time = clock.get_time() / 1000.0\n</code></pre> <code>clock.get_time()</code> gives the time in milliseconds since the last frame, and we divide by 1000 to convert it into seconds.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#framerate-independent-rotation","title":"Framerate Independent Rotation","text":"<p>Instead of adding a fixed amount to the angle each frame, we multiply the rotation speed by <code>delta_time</code>: <pre><code>    angle += rotation_speed * delta_time\n</code></pre></p> <p>If the game runs slower, <code>delta_time</code> is larger, ensuring the square still rotates at the correct speed.</p> <p>By adjusting the amount of movement each frame by the time it took to render the frame, we ensure that no matter how fast or slow the game runs, the square always rotates at 90 degrees per second.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#try-it-in-your-own-projects","title":"Try It in Your Own Projects!","text":"<p>If you\u2019re making a game where objects move, always make sure your movement is based on time, not frames. Use <code>delta_time</code> for:</p> <ul> <li>Character movement</li> <li>Animations</li> <li>Physics calculations</li> <li>Rotations (like our square!)</li> </ul> <p>By making games frame rate-independent, you ensure a smooth and fair experience for all players!</p>"},{"location":"pygame/framerate-independence/framerate_independence/#walkthrough-of-game_looppy","title":"Walkthrough of <code>game_loop.py</code>","text":""},{"location":"pygame/framerate-independence/framerate_independence/#initializing-pygame-and-creating-the-window","title":"Initializing Pygame and Creating the Window","text":"<p><pre><code>import pygame\nimport sys\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\npygame.display.set_caption(\"Spinning Square with FPS Counter\")\n</code></pre> This sets up Pygame and creates a window that is 800x600 pixels.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#defining-the-square-and-frame-rate-settings","title":"Defining the Square and Frame Rate Settings","text":"<p><pre><code>TARGET_FPS = 30\nsquare_size = 100\nsquare_center = (400, 300)\nangle = 0\nrotation_speed = 90  # Degrees per second\n</code></pre> We set the square size, its center, and rotation speed. The FPS starts at 30 but can be changed.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#using-delta_time-for-frame-rate-independence","title":"Using <code>delta_time</code> for Frame Rate Independence","text":"<pre><code>delta_time = clock.get_time() / 1000.0\nangle += rotation_speed * delta_time\n</code></pre> <p>Instead of increasing <code>angle</code> by a fixed amount per frame, we scale <code>rotation_speed</code> by <code>delta_time</code>, ensuring smooth rotation at any FPS.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#handling-user-input-to-adjust-fps-and-rotation-speed","title":"Handling User Input to Adjust FPS and Rotation Speed","text":"<p><pre><code>elif event.key == pygame.K_UP:\n    rotation_speed += 10\nelif event.key == pygame.K_DOWN:\n    rotation_speed = max(10, rotation_speed - 10)\nelif event.key == pygame.K_RIGHT:\n    TARGET_FPS = min(60, TARGET_FPS + 10)\nelif event.key == pygame.K_LEFT:\n    TARGET_FPS = max(10, TARGET_FPS - 10)\n</code></pre> This allows users to change the FPS and rotation speed dynamically while the game is running.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#drawing-the-rotating-square","title":"Drawing the Rotating Square","text":"<pre><code>square_surface = pygame.Surface((square_size, square_size), pygame.SRCALPHA)\npygame.draw.rect(square_surface, (0, 255, 0), (0, 0, square_size, square_size))\nrotated_square = pygame.transform.rotate(square_surface, angle)\nrect = rotated_square.get_rect(center=square_center)\nscreen.blit(rotated_square, rect.topleft)\n</code></pre> <p>We create a square surface, rotate it, and draw it at the center of the screen.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#displaying-fps-and-rotation-speed","title":"Displaying FPS and Rotation Speed","text":"<p><pre><code>fps_text = font.render(f\"FPS: {int(clock.get_fps())}\", True, (255, 255, 255))\nscreen.blit(fps_text, (700, 10))\n</code></pre> The FPS is displayed in the top-right corner.</p>"},{"location":"pygame/framerate-independence/framerate_independence/#updating-the-screen-and-controlling-fps","title":"Updating the Screen and Controlling FPS","text":"<pre><code>pygame.display.flip()\nclock.tick(TARGET_FPS)\n</code></pre> <p>The display is updated each frame, and the frame rate is capped at <code>TARGET_FPS</code>.</p>"},{"location":"pygame/full-screen/coming_soon/","title":"Full Screen Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/images/coming_soon/","title":"Images Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/keyboard-input/keyboard_input/","title":"Handling Keyboard Input in Pygame","text":"<p>     \u2b07 Download keyboard_input.py </p> <p>In this example:</p> <ul> <li>The square's speed can be adjusted by pressing the + and - keys.</li> <li>The square can move in any direction by holding down the arrow keys.</li> <li>The square is kept within screen boundaries.</li> </ul>"},{"location":"pygame/keyboard-input/keyboard_input/#understanding-keyboard-events","title":"Understanding Keyboard Events","text":"<p>Pygame detects user input through events. An event is an action that occurs during the game, like pressing a key, moving the mouse, or clicking a button. Pygame keeps track of these events in an event queue, which we check every frame of our game loop.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#types-of-key-press-events","title":"Types of Key Press Events","text":"<p>There are two primary keyboard events in Pygame:</p> <ol> <li><code>pygame.KEYDOWN</code> \u2013 Fired when a key is pressed down.</li> <li><code>pygame.KEYUP</code> \u2013 Fired when a key is released.</li> </ol> <p>Each key on the keyboard has a unique constant, such as:</p> <ul> <li><code>pygame.K_LEFT</code> \u2192 Left Arrow Key</li> <li><code>pygame.K_RIGHT</code> \u2192 Right Arrow Key</li> <li><code>pygame.K_UP</code> \u2192 Up Arrow Key</li> <li><code>pygame.K_DOWN</code> \u2192 Down Arrow Key</li> </ul> <p>We capture these events in Pygame using <code>pygame.event.get()</code> inside our game loop.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#detecting-a-key-press","title":"Detecting a Key Press","text":"<p>We use the event loop to detect when a key is pressed or released. Because multiple keys can be pressed durning any given frame, we always get a list of events.  Notice, we use a <code>for</code> loop to iterate through each event allowing for us to react to multiple keys being pressed durning the same frame.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#using-pygameeventget","title":"Using <code>pygame.event.get()</code>","text":"<p>The following code detects if the <code>+</code> or =<code>-</code> key was pressed down.  It only fires once.</p> <pre><code>    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        elif event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_PLUS or event.key == pygame.K_EQUALS:  # Increase speed\n                player_speed += 1\n            elif event.key == pygame.K_MINUS or event.key == pygame.K_UNDERSCORE:  # Decrease speed\n                player_speed = max(1, player_speed - 1)\n</code></pre> <p>For every <code>event</code>:</p> <ul> <li>The <code>event.type</code> tells us whether a key was just pressed down (<code>KEYDOWN</code>) or released (<code>KEYUP</code>).</li> <li>The <code>event.key</code> tells us which key was pressed or released.</li> </ul> <p>When you create your own game, think clearly about if you want to respond to the <code>KEYDOWN</code> or <code>KEYUP</code> event.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#detecting-held-keys","title":"Detecting Held Keys","text":"<p>In many games, we need to check if a key is being held down rather than just detecting the moment it is pressed. This is especially useful for continuous movement, such as keeping a character moving while holding the arrow key.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#using-pygamekeyget_pressed","title":"Using <code>pygame.key.get_pressed()</code>","text":"<p>Pygame provides <code>pygame.key.get_pressed()</code>, which returns a list where each index corresponds to a key on the keyboard. The value is <code>True</code> if the key is currently being held, and <code>False</code> otherwise.</p>"},{"location":"pygame/keyboard-input/keyboard_input/#example-detecting-held-keys","title":"Example: Detecting Held Keys","text":"<pre><code>keys = pygame.key.get_pressed()\nif keys[pygame.K_LEFT]:\n    print(\"Left arrow key is being held down\")\n</code></pre>"},{"location":"pygame/mouse-input/mouse_input/","title":"Mouse Interaction in Pygame \ud83c\udfa8\ud83d\uddb1\ufe0f","text":"<p>This project demonstrates how to handle mouse input in Pygame by allowing users to paint on the screen with circles. It includes: - Clicking to draw circles - Dragging to paint continuously - Pressing SPACE to clear the screen - Pressing C to change colors</p> <p>This example helps students learn mouse events and tracking input states, which are essential for building interactive games.</p>"},{"location":"pygame/mouse-input/mouse_input/#running-the-example","title":"\ud83c\udfae Running the Example","text":"<ol> <li>Install Pygame if you haven't already:    <pre><code>pip install pygame\n</code></pre></li> <li>Run the script:    <pre><code>python mouse_paint.py\n</code></pre></li> <li>Start painting by clicking and dragging! \ud83c\udfa8</li> </ol>"},{"location":"pygame/mouse-input/mouse_input/#understanding-mouse-events-in-pygame","title":"\ud83d\uddb1\ufe0f Understanding Mouse Events in Pygame","text":"<p>Pygame provides several mouse events that allow us to detect user interactions:</p> Event Description <code>pygame.MOUSEMOTION</code> Detects when the mouse moves <code>pygame.MOUSEBUTTONDOWN</code> Detects when a mouse button is pressed <code>pygame.MOUSEBUTTONUP</code> Detects when a mouse button is released <p>In this project: - <code>MOUSEBUTTONDOWN</code> starts drawing. - <code>MOUSEBUTTONUP</code> stops drawing. - <code>MOUSEMOTION</code> allows painting while dragging (only when the mouse is held down).</p>"},{"location":"pygame/mouse-input/mouse_input/#why-track-mouse-state","title":"\ud83e\udde0 Why Track Mouse State?","text":"<p>Instead of just detecting clicks, we track whether the mouse button is held down using a <code>mouse_held</code> variable: <pre><code>if event.type == pygame.MOUSEBUTTONDOWN:\n    mouse_held = True\n\nif event.type == pygame.MOUSEBUTTONUP:\n    mouse_held = False\n\nif event.type == pygame.MOUSEMOTION and mouse_held:\n    pygame.draw.circle(background, circle_color, (mouse_x, mouse_y), 10)\n</code></pre> This allows us to paint continuously while dragging the mouse.</p>"},{"location":"pygame/mouse-input/mouse_input/#why-use-screen-and-background-surfaces","title":"\ud83d\uddbc\ufe0f Why Use <code>SCREEN</code> and <code>background</code> Surfaces?","text":"<p>Pygame clears the screen every frame, so we need to store our drawings separately. We use: 1. <code>background</code> Surface (stores permanent drawings)    - Circles drawn with clicks are saved here.    - This ensures that drawings remain when the screen updates.</p> <ol> <li><code>SCREEN</code> Surface (used for displaying the frame)</li> <li><code>background</code> is blitted onto <code>SCREEN</code> each frame.</li> <li>A temporary circle follows the mouse.</li> </ol> <p>\ud83d\udca1 Without a background surface, drawings would disappear every frame!</p>"},{"location":"pygame/mouse-input/mouse_input/#how-mouse-input-makes-games-fun","title":"\ud83c\udfae How Mouse Input Makes Games Fun!","text":"<p>Mouse input allows players to interact in creative ways. Here are some game ideas: - Drawing games: Create a simple painting app. - Point-and-click games: Players click to interact with objects. - Dragging mechanics: Dragging objects (e.g., slingshot in Angry Birds). - Aiming mechanics: Aim and shoot using the mouse.</p> <p>Try modifying this project to create your own interactive experience! \ud83d\ude80</p>"},{"location":"pygame/mouse-input/mouse_input/#challenges-for-students","title":"\ud83c\udfc6 Challenges for Students","text":"<p>Want to take this further? Try these ideas: 1. Change brush size: Use the scroll wheel to make circles bigger or smaller. 2. Undo feature: Add a way to remove the last circle drawn. 3. Eraser mode: Press \"E\" to draw in white (erasing previous circles). 4. Line drawing: Instead of circles, connect points to form lines.</p>"},{"location":"pygame/parallax-scrolling/coming_soon/","title":"Parallax Scrolling Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/particles/coming_soon/","title":"Particle Effects Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/physics/coming_soon/","title":"Physics Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/player-class/coming_soon/","title":"Player Class Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/publish-itch/coming_soon/","title":"Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"pygame/sound-effects/coming_soon/","title":"Sound Effects Mini Lesson Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"},{"location":"python/coming_soon/","title":"Python Mini Lessons Coming Soon","text":"<p>In the meantime, play our game.</p> <p>Tap or Press Spacebar to Play</p>"}]}